using Microsoft.VisualStudio.TestTools.UnitTesting;
using Portalum.Zvt.Helpers;
using Portalum.Zvt.Models;
using Portalum.Zvt.Repositories;
using System.Text;

namespace Portalum.Zvt.UnitTest
{
    [TestClass]
    public class ReceiveHandlerTest
    {
        private ReceiveHandler GetReceiveHandler()
        {
            IErrorMessageRepository errorMessageRepository = new EnglishErrorMessageRepository();
            IIntermediateStatusRepository intermediateStatusRepository = new EnglishIntermediateStatusRepository();

            var logger = LoggerHelper.GetLogger();
            var encoding = Encoding.GetEncoding(437);

            return new ReceiveHandler(logger.Object, encoding, errorMessageRepository, intermediateStatusRepository);
        }

        [TestMethod]
        public void ProcessData_FragmentedDataPackets1_Successful()
        {
            var hexLines = new string[]
            {
                "06-D3-FF-8E-02-06-82-02-8A-1F-07-01-02-25-82-02-82-07-18-20-20-4C-65-69-68-73-74-65-6C-6C-75-6E-67-20-76-6F-6E-20-68-6F-62-65-78-07-16-20-20-20-20-20-66-81-72-20-50-4F-52-54-41-4C-55-4D-20-47-6D-62-48-07-12-20-20",
                "20-20-20-20-20-20-48-65-72-72-20-54-65-73-74-31-07-15-20-20-20-20-20-5A-56-54-20-54-43-50-2F-49-50-2C-20-44-48-43-50-07-1B-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-1B-31", 
                "39-2E-31-30-2E-32-30-32-31-20-20-20-20-20-20-20-20-20-31-33-3A-33-30-3A-30-34-07-1B-30-30-30-30-30-31-33-20-20-20-20-30-30-30-34-20-20-20-20-20-20-30-30-30-30-30-31-07-13-20-20-20-20-20-20-20-20-4B-55-4E-44-45-4E",
                "42-45-4C-45-47-07-1B-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-12-54-65-72-6D-69-6E-61-6C-3A-20-41-48-30-30-30-30-30-36-07-11-42-65-6C-65-67-23-20-20-3A-20-48-30-30-34-30",
                "30-31-07-12-4C-3A-2A-2A-2A-2A-2A-2A-2A-2A-2A-2A-2A-2A-30-30-30-30-07-13-41-49-44-3A-20-41-30-30-30-30-30-30-30-30-34-31-30-31-30-07-11-4B-61-72-74-65-3A-20-4D-41-53-54-45-52-43-41-52-44-07-18-41-70-70-2E-20-20-3A",
                "20-44-65-62-69-74-20-4D-61-73-74-65-72-63-61-72-64-07-13-20-20-20-20-20-20-20-20-43-6F-6E-74-61-63-74-6C-65-73-73-07-04-4B-41-55-46-07-01-20-07-05-53-55-4D-4D-45-07-12-20-20-20-20-20-20-20-20-20-45-55-52-3A-20-31",
                "2C-30-30-07-01-20-07-1B-54-72-61-63-65-23-3A-20-20-20-20-20-20-20-20-20-20-20-20-31-30-30-30-34-30-30-31-07-01-20-07-09-52-65-66-65-72-65-6E-7A-3A-07-01-20-07-1A-20-41-75-74-6F-72-69-73-69-65-72-75-6E-67-73-63-6F",
                "64-65-3A-33-36-37-36-35-35-07-11-20-20-20-20-20-20-20-20-20-28-52-43-20-30-30-31-29-07-14-20-20-20-20-47-65-6E-65-68-6D-69-67-74-20-33-36-37-36-35-35-07-10-20-20-20-20-20-20-20-30-30-31-30-30-34-30-30-31-07-01-20",
                "07-19-20-41-56-3A-20-2B-30-34-2E-30-37-20-28-4A-75-6E-20-31-31-20-32-30-32-31-29-07-1B-54-49-3A-20-45-20-44-54-3A-20-30-2F-30-2F-20-4F-46-3A-20-30-2F-30-2F-20-43-47-3A-07-0F-20-20-20-20-20-20-20-20-20-20-20-31-2F",
                "30-2F-07-01-20-07-01-20-07-01-20-07-01-20-07-01-20-09-01-81",
            };

            var receiveHandler = this.GetReceiveHandler();

            for (var i = 0; i < hexLines.Length; i++)
            {
                var data = ByteHelper.HexToByteArray(hexLines[i]);
                var processDataState = receiveHandler.ProcessData(data);

                if (i == hexLines.Length - 1)
                {
                    Assert.AreEqual(processDataState.State, ProcessDataState.Processed);
                    continue;
                }

                Assert.AreEqual(processDataState.State, ProcessDataState.WaitForMoreData);
            }
        }

        [TestMethod]
        public void ProcessData_FragmentedDataPackets2_Successful()
        {
            var hexLines = new string[]
            {
                "06-D3-FF-BD-04-06-82-04-B9-1F-07-01-01-1F-37-01-01-14-01-02-25-82-04-AA-09-01-00-07-21-20-20-20-20-54-53-53-20-54-65-6C-63-6F-20-53-61-6C-65-73-20-53-65-72-76-69-63-65-73-20-47-6D-62-48-07-19-20-20-20-20-20-20-20-20-20-20-20-20-4F-62-61-63-68-67-61-73-73-65-20-31-36-07-17-20-20-20-20-20-20-20-20-20-20-20-20-20-20-57-69-65-6E-20-31-32-32-30-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-30-34-32-20-20-20-20-20-20-32-38-2E-30-32-2E-32-30-32-32-20-31-32-3A-32-34-3A-35-39-20-20-20-20-20-20-30-32-31-39-07-19-20-20-20-20-20-20-20-20-20-20-20-20-20-48-C4-4E-44-4C-45-52-42-45-4C-45-47-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-16-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-43-6C-6F-73-75-72-65-07-00-07-26-48-C4-4E-44-4C-45-52-2D-49-44-3A-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-37-33-31-30-30-30-30-30-30-38-07-26-54-45-52-4D-49-4E-41-4C-3A-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-31-30-30-30-30-30-35-38-07-11-42-61-74-63-68-2D-4E-75-6D-6D-65-72-6E-3A-20-34-32-07-18-56-6F-6E-3A-20-32-31-2E-30-32-2E-32-30-32-32-20-30-38-3A-33-39-3A-30-33-07-18-42-69-73-3A-20-32-38-2E-30-32-2E-32-30-32-32-20-31-32-3A-32-34-3A-35-39-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-48-4F-53-54-53-55-4D-4D-45-4E-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-00-07-17-20-20-20-20-20-20-20-20-20-20-20-20-20-20-53-75-6D-6D-65-6E-20-4F-4B-07-25-54-65-72-6D-69-6E-61-6C-73-75-6D-6D-65-6E-20-73-69-6E-64-20-67-6C-65-69-63-68-20-48-6F-73-74-73-75-6D-6D-65-6E-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-47-45-53-41-4D-54-53-55-4D-4D-45-4E-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-08-20-20-41-4E-5A-41-48-4C-07-0D-42-45-54-52-41-47-57-C4-48-52-55-4E-47-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-20-20-20-20-20-20-20-34-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-20-45-55-52-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-53-68-6F-72-74-20-4C-69-73-74-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-00-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-56-49-53-41-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-45-55-52-20-20-20-20-20-20-20-20-20-20-41-4E-5A-41-48-4C-20-20-20-20-20-20-20-20-20-20-20-20-20-42-45-54-52-41-47-07-26-44-65-62-69-74-20-20-20-20-20-20-20-20-20-20-20-20-33-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-38-2E-32-34-07-26-4B-72-65-64-69-74-20-20-20-20-20-20-20-20-20-20-20-31-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-47-65-73-61-6D-74-3A-20-20-20-20-20-20-20-20-20-20-34-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-07-00-07-26-52-43-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-30-30-37-07-00-07",
                "19-20-20-20-20-20-20-20-20-20-20-20-20-50-52-49-4A-41-54-45-20-41-44-4D-49-4E-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-18-20-20-20-20-20-20-20-20-20-20-20-20-20-56-69-65-6C-65-6E-20-44-61-6E-6B-07-24-20-42-65-77-61-68-72-65-6E-20-53-69-65-20-64-65-6E-20-42-65-6C-65-67-20-7A-75-72-20-73-70-E4-74-65-72-65-6E-07-1A-20-20-20-20-20-20-20-20-20-20-20-DC-62-65-72-70-72-FC-66-75-6E-67-20-61-75-66-07-1F-20-20-20-20-20-20-20-56-65-72-73-69-6F-6E-3A-20-4B-53-20-41-30-32-2E-30-37-20-28-30-34-39-29-09-01-8F"
            };

            var receiveHandler = this.GetReceiveHandler();

            for (var i = 0; i < hexLines.Length; i++)
            {
                var data = ByteHelper.HexToByteArray(hexLines[i]);
                var processDataState = receiveHandler.ProcessData(data);

                if (i == hexLines.Length - 1)
                {
                    Assert.AreEqual(processDataState.State, ProcessDataState.Processed);
                    continue;
                }

                Assert.AreEqual(processDataState.State, ProcessDataState.WaitForMoreData);
            }
        }

        [TestMethod]
        public void ProcessData_FullDataPacket_Successful()
        {
            var hexLines = new string[]
            {
                "06-D3-FF-BD-04-06-82-04-B9-1F-07-01-01-1F-37-01-01-14-01-02-25-82-04-AA-09-01-00-07-21-20-20-20-20-54-53-53-20-54-65-6C-63-6F-20-53-61-6C-65-73-20-53-65-72-76-69-63-65-73-20-47-6D-62-48-07-19-20-20-20-20-20-20-20-20-20-20-20-20-4F-62-61-63-68-67-61-73-73-65-20-31-36-07-17-20-20-20-20-20-20-20-20-20-20-20-20-20-20-57-69-65-6E-20-31-32-32-30-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-30-34-32-20-20-20-20-20-20-32-38-2E-30-32-2E-32-30-32-32-20-31-32-3A-32-34-3A-35-39-20-20-20-20-20-20-30-32-31-39-07-19-20-20-20-20-20-20-20-20-20-20-20-20-20-48-C4-4E-44-4C-45-52-42-45-4C-45-47-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-16-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-43-6C-6F-73-75-72-65-07-00-07-26-48-C4-4E-44-4C-45-52-2D-49-44-3A-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-37-33-31-30-30-30-30-30-30-38-07-26-54-45-52-4D-49-4E-41-4C-3A-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-31-30-30-30-30-30-35-38-07-11-42-61-74-63-68-2D-4E-75-6D-6D-65-72-6E-3A-20-34-32-07-18-56-6F-6E-3A-20-32-31-2E-30-32-2E-32-30-32-32-20-30-38-3A-33-39-3A-30-33-07-18-42-69-73-3A-20-32-38-2E-30-32-2E-32-30-32-32-20-31-32-3A-32-34-3A-35-39-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-48-4F-53-54-53-55-4D-4D-45-4E-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-00-07-17-20-20-20-20-20-20-20-20-20-20-20-20-20-20-53-75-6D-6D-65-6E-20-4F-4B-07-25-54-65-72-6D-69-6E-61-6C-73-75-6D-6D-65-6E-20-73-69-6E-64-20-67-6C-65-69-63-68-20-48-6F-73-74-73-75-6D-6D-65-6E-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-47-45-53-41-4D-54-53-55-4D-4D-45-4E-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-08-20-20-41-4E-5A-41-48-4C-07-0D-42-45-54-52-41-47-57-C4-48-52-55-4E-47-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-20-20-20-20-20-20-20-34-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-20-45-55-52-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-53-68-6F-72-74-20-4C-69-73-74-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-00-07-00-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-56-49-53-41-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-45-55-52-20-20-20-20-20-20-20-20-20-20-41-4E-5A-41-48-4C-20-20-20-20-20-20-20-20-20-20-20-20-20-42-45-54-52-41-47-07-26-44-65-62-69-74-20-20-20-20-20-20-20-20-20-20-20-20-33-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-38-2E-32-34-07-26-4B-72-65-64-69-74-20-20-20-20-20-20-20-20-20-20-20-31-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-26-47-65-73-61-6D-74-3A-20-20-20-20-20-20-20-20-20-20-34-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-34-2E-31-32-07-00-07-26-52-43-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-20-30-30-37-07-00-07-19-20-20-20-20-20-20-20-20-20-20-20-20-50-52-49-4A-41-54-45-20-41-44-4D-49-4E-07-26-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-2D-07-18-20-20-20-20-20-20-20-20-20-20-20-20-20-56-69-65-6C-65-6E-20-44-61-6E-6B-07-24-20-42-65-77-61-68-72-65-6E-20-53-69-65-20-64-65-6E-20-42-65-6C-65-67-20-7A-75-72-20-73-70-E4-74-65-72-65-6E-07-1A-20-20-20-20-20-20-20-20-20-20-20-DC-62-65-72-70-72-FC-66-75-6E-67-20-61-75-66-07-1F-20-20-20-20-20-20-20-56-65-72-73-69-6F-6E-3A-20-4B-53-20-41-30-32-2E-30-37-20-28-30-34-39-29-09-01-8F"
            };

            var receiveHandler = this.GetReceiveHandler();

            foreach (var hexLine in hexLines)
            {
                var data = ByteHelper.HexToByteArray(hexLine);
                var processDataState = receiveHandler.ProcessData(data);
                Assert.AreEqual(processDataState.State, ProcessDataState.Processed);
            }
        }
    }
}
